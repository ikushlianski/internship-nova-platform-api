generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model classes {
  class_id          String              @id(map: "classes_pk") @db.VarChar
  class_code        String?             @db.VarChar
  path_id           String?             @db.VarChar
  start_date        String              @db.VarChar
  end_date          String?             @db.VarChar
  tuition_lang_id   String              @db.VarChar
  courses           courses?            @relation(fields: [path_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction, map: "classes_paths_fk")
  tuition_languages tuition_languages   @relation(fields: [tuition_lang_id], references: [tuition_lang_id], onDelete: NoAction, onUpdate: NoAction, map: "classes_tuition_languages_fk")
  classes_calls     classes_calls[]
  classes_homeworks classes_homeworks[]
  classes_mentors   classes_mentors[]
  classes_students  classes_students[]
}

model classes_calls {
  class_call_id   String        @id(map: "class_calls_pk") @db.VarChar
  class_id        String        @db.VarChar
  class_call_date String        @db.VarChar
  class_call_time String        @db.VarChar
  mentor_id       String        @db.VarChar
  recording_url   String?       @db.VarChar
  meeting_kind_id String        @db.VarChar
  classes         classes       @relation(fields: [class_id], references: [class_id], onDelete: NoAction, onUpdate: NoAction, map: "class_calls_classes_fk")
  meeting_kinds   meeting_kinds @relation(fields: [meeting_kind_id], references: [meeting_kind_id], onDelete: NoAction, onUpdate: NoAction, map: "class_calls_meeting_kinds_fk")
  mentors         mentors       @relation(fields: [mentor_id], references: [mentor_id], onDelete: NoAction, onUpdate: NoAction, map: "class_calls_mentors_fk")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model classes_homeworks {
  path_id           String              @db.VarChar
  module_id         String              @db.VarChar
  section_id        String?             @db.VarChar
  lesson_id         String              @db.VarChar
  class_id          String              @db.VarChar
  class_lesson_id   String              @id(map: "classes_lessons_pk") @db.VarChar
  courses           courses             @relation(fields: [path_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction, map: "classes_lessons_courses_fk")
  classes           classes             @relation(fields: [class_id], references: [class_id], onDelete: NoAction, onUpdate: NoAction, map: "classes_structures_classes_fk")
  lessons           lessons             @relation(fields: [lesson_id], references: [lesson_id], onDelete: NoAction, onUpdate: NoAction, map: "classes_structures_lessons_fk")
  modules           modules             @relation(fields: [module_id], references: [module_id], onDelete: NoAction, onUpdate: NoAction, map: "classes_structures_modules_fk")
  sections          sections?           @relation(fields: [section_id], references: [section_id], onDelete: NoAction, onUpdate: NoAction, map: "classes_structures_sections_fk")
  student_questions student_questions[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model classes_mentors {
  class_id   String   @db.VarChar
  mentor_id  String   @db.VarChar
  is_primary Boolean?
  classes    classes  @relation(fields: [class_id], references: [class_id], onDelete: NoAction, onUpdate: NoAction, map: "classes_mentors_classes_fk")
  mentors    mentors  @relation(fields: [mentor_id], references: [mentor_id], onDelete: NoAction, onUpdate: NoAction, map: "classes_mentors_mentors_fk")

  @@ignore
}

model classes_students {
  class_id      String   @db.VarChar
  student_id    String   @db.VarChar
  date_enrolled String   @db.VarChar
  date_left     String?  @db.VarChar
  classes       classes  @relation(fields: [class_id], references: [class_id], onDelete: NoAction, onUpdate: NoAction, map: "classes_students_classes_fk")
  students      students @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "classes_students_students_fk")

  @@id([class_id, student_id], map: "classes_students_pk")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model clients {
  client_id   String     @id(map: "clients_pk") @db.VarChar
  client_name String     @db.VarChar
  company_id  String     @db.VarChar
  companies   companies  @relation(fields: [company_id], references: [company_id], onDelete: NoAction, onUpdate: NoAction, map: "clients_companies_fk")
  projects    projects[]
}

model companies {
  company_id       String            @id(map: "companies_pk") @db.VarChar
  company_name     String            @db.VarChar
  company_location String            @db.VarChar
  clients          clients[]
  companies_users  companies_users[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model companies_users {
  user_id     String?    @db.VarChar
  company_id  String?    @db.VarChar
  position_id String?    @db.VarChar
  companies   companies? @relation(fields: [company_id], references: [company_id], onDelete: NoAction, onUpdate: NoAction, map: "companies_users_companies_fk")
  positions   positions? @relation(fields: [position_id], references: [position_id], onDelete: NoAction, onUpdate: NoAction, map: "companies_users_positions_fk")
  users       users?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "companies_users_users_fk")

  @@ignore
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model courses {
  subject_id         String?              @db.VarChar
  course_id          String               @id(map: "path_pk") @db.VarChar
  course_name        String?              @db.VarChar
  path_level_id      String               @db.VarChar
  path_code          String               @db.VarChar
  active_since       String?              @db.VarChar
  classes            classes[]
  classes_homeworks  classes_homeworks[]
  courses_levels     courses_levels       @relation(fields: [path_level_id], references: [courses_level_id], onDelete: NoAction, onUpdate: NoAction, map: "path_paths_levels_fk")
  courses_structures courses_structures[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model courses_levels {
  courses_level_id   String    @id(map: "paths_levels_pk") @db.VarChar
  courses_level_name String    @db.VarChar
  courses            courses[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model courses_mentors {
  course_id String @db.VarChar
  mentor_id String @db.VarChar

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model courses_structures {
  course_id String   @db.VarChar
  module_id String   @db.VarChar
  lesson_id String?  @db.VarChar
  lessons   lessons? @relation(fields: [lesson_id], references: [lesson_id], onDelete: NoAction, onUpdate: NoAction, map: "paths_structures_lessons_fk")
  modules   modules  @relation(fields: [module_id], references: [module_id], onDelete: NoAction, onUpdate: NoAction, map: "paths_structures_modules_fk")
  courses   courses  @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction, map: "paths_structures_path_fk")

  @@ignore
}

model lessons {
  lesson_id          String               @id(map: "lessons_pk") @db.VarChar
  lesson_name        String               @db.VarChar
  video_url          String?              @db.VarChar
  classes_homeworks  classes_homeworks[]
  courses_structures courses_structures[]
}

model meeting_kinds {
  meeting_kind_id   String          @id(map: "meeting_kinds_pk") @db.VarChar
  meeting_kind_name String          @db.VarChar
  classes_calls     classes_calls[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model memo_cards {
  card_id      String     @id(map: "memo_cards_pk") @db.VarChar
  deck_id      String     @db.VarChar
  question     String     @db.VarChar
  answer       String?    @db.VarChar
  created_date String?    @db.VarChar
  updated_date String?    @db.VarChar
  due_date     String?    @db.VarChar
  lapses       String?    @db.VarChar
  memo_decks   memo_decks @relation(fields: [deck_id], references: [deck_id], onDelete: NoAction, onUpdate: NoAction, map: "memo_cards_memo_decks_fk")
}

model memo_decks {
  deck_id          String       @id(map: "memo_decks_pk") @db.VarChar
  user_id          String       @db.VarChar
  deck_name        String       @db.VarChar
  deck_description String?      @db.VarChar
  parent_id        String?      @db.VarChar
  memo_cards       memo_cards[]
  memo_decks       memo_decks?  @relation("memo_decksTomemo_decks", fields: [parent_id], references: [deck_id], onDelete: NoAction, onUpdate: NoAction, map: "memo_decks_memo_decks_fk")
  other_memo_decks memo_decks[] @relation("memo_decksTomemo_decks")
  users            users        @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "memo_decks_users_fk")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model memo_study_options {
  user_id   String? @db.VarChar
  option_id String? @db.VarChar
  deck_id   String? @db.VarChar

  @@ignore
}

model mentors {
  mentor_id             String            @id(map: "mentors_pk") @db.VarChar
  user_id               String            @db.VarChar
  mentor_full_name_ru   String            @db.VarChar
  mentor_full_name_en   String            @db.VarChar
  mentor_description_ru String?           @db.VarChar
  mentor_description_en String?           @db.VarChar
  classes_calls         classes_calls[]
  classes_mentors       classes_mentors[]
}

model modules {
  module_id          String               @id(map: "modules_pk") @db.VarChar
  module_name        String               @db.VarChar
  module_description String?              @db.VarChar
  classes_homeworks  classes_homeworks[]
  courses_structures courses_structures[]
}

model positions {
  position_id     String            @id(map: "positions_pk") @db.VarChar
  position_name   String            @db.VarChar
  companies_users companies_users[]
}

model prizes {
  prize_id   String    @id(map: "prizes_pk") @db.VarChar
  prize_name String?   @db.VarChar
  raffles    raffles[]
}

model projects {
  project_id     String           @id(map: "projects_pk") @db.VarChar
  project_code   String?          @db.VarChar
  project_name   String           @db.VarChar
  client_id      String?          @db.VarChar
  clients        clients?         @relation(fields: [client_id], references: [client_id], onDelete: NoAction, onUpdate: NoAction, map: "projects_clients_fk")
  users_projects users_projects[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model raffles {
  raffle_id String  @id(map: "raffles_pk") @db.VarChar
  prize_id  String? @db.VarChar
  prizes    prizes? @relation(fields: [prize_id], references: [prize_id], onDelete: NoAction, onUpdate: NoAction, map: "raffles_prizes_fk")
}

model roles {
  role_id    String       @id(map: "roles_pk") @db.VarChar
  role_name  String?      @db.VarChar
  user_roles user_roles[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sections {
  section_id        String              @id(map: "sections_pk") @db.VarChar
  section_name      String              @db.VarChar
  classes_homeworks classes_homeworks[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model student_class_ranking {
  student_id String @db.VarChar
  class_id   String @db.VarChar
  points     Int?   @default(0)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model student_questions {
  student_id        String             @db.VarChar
  question_text     String             @db.VarChar
  answer_text       String?            @db.VarChar
  class_lesson_id   String?            @db.VarChar
  classes_homeworks classes_homeworks? @relation(fields: [class_lesson_id], references: [class_lesson_id], onDelete: NoAction, onUpdate: NoAction, map: "student_questions_classes_lessons_fk")

  @@ignore
}

model students {
  student_id       String             @id(map: "students_pk") @db.VarChar
  class_id         String             @db.VarChar
  user_id          String             @db.VarChar
  date_joined      String             @db.VarChar
  is_active        Boolean?
  classes_students classes_students[]
  students_tasks   students_tasks[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model students_tasks {
  student_id     String         @db.VarChar
  task_id        String         @db.VarChar
  answer         String?        @db.VarChar
  answer_date    String?        @db.VarChar
  task_status_id String         @db.VarChar
  correct_answer String?        @db.VarChar
  students       students       @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction, map: "students_tasks_students_fk")
  tasks          tasks          @relation(fields: [task_id], references: [task_id], onDelete: NoAction, onUpdate: NoAction, map: "students_tasks_tasks_fk")
  tasks_statuses tasks_statuses @relation(fields: [task_status_id], references: [task_status_id], onDelete: NoAction, onUpdate: NoAction, map: "students_tasks_tasks_statuses_fk")

  @@id([student_id, task_id], map: "students_tasks_pk")
}

model subjects {
  subject_id       String             @id(map: "subjects_pk") @db.VarChar
  subject_code     String             @db.VarChar
  subject_name     String             @db.VarChar
  subjects_aspects subjects_aspects[]
  tasks            tasks[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model subjects_aspects {
  aspect_id          String   @id(map: "subjects_aspects_pk") @db.VarChar
  aspect_name        String   @db.VarChar
  subject_id         String   @db.VarChar
  aspect_description String?  @db.VarChar
  subjects           subjects @relation(fields: [subject_id], references: [subject_id], onDelete: NoAction, onUpdate: NoAction, map: "subjects_aspects_subjects_fk")
  tasks              tasks[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model subjects_task_types {
  subject_id   String @db.VarChar
  task_type_id String @db.VarChar

  @@ignore
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model task_types {
  task_type_id          String  @id(map: "task_types_pk") @db.VarChar
  task_type_name        String  @db.VarChar
  task_type_description String? @db.VarChar
  tasks                 tasks[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tasks {
  task_id           String            @id(map: "tasks_pk") @db.VarChar
  task_description  String            @db.VarChar
  task_name         String            @db.VarChar
  task_type_id      String            @db.VarChar
  task_image_url    String?           @db.VarChar
  subject_id        String?           @db.VarChar
  subject_aspect_id String?           @db.VarChar
  students_tasks    students_tasks[]
  subjects_aspects  subjects_aspects? @relation(fields: [subject_aspect_id], references: [aspect_id], onDelete: NoAction, onUpdate: NoAction, map: "tasks_subjects_aspects_fk")
  subjects          subjects?         @relation(fields: [subject_id], references: [subject_id], onDelete: NoAction, onUpdate: NoAction, map: "tasks_subjects_fk")
  task_types        task_types        @relation(fields: [task_type_id], references: [task_type_id], onDelete: NoAction, onUpdate: NoAction, map: "tasks_task_types_fk")
  tasks_options     tasks_options[]
}

model tasks_options {
  task_id      String?  @db.VarChar
  option_id    String   @id(map: "tasks_options_pk") @db.VarChar
  option_text  String   @db.VarChar
  option_index Int      @db.SmallInt
  is_correct   Boolean?
  tasks        tasks?   @relation(fields: [task_id], references: [task_id], onDelete: NoAction, onUpdate: NoAction, map: "tasks_options_tasks_fk")
}

model tasks_statuses {
  task_status_id   String           @id(map: "tasks_statuses_pk") @db.VarChar
  task_status_name String           @db.VarChar
  students_tasks   students_tasks[]
}

model tuition_languages {
  tuition_lang_id   String    @id(map: "tuition_languages_pk") @db.VarChar
  tuition_lang_name String    @db.VarChar
  tuition_lang_code String    @db.VarChar
  classes           classes[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model user_roles {
  user_id String @db.VarChar
  role_id String @db.VarChar
  roles   roles  @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "user_roles_roles_fk")
  users   users  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_roles_users_fk")

  @@ignore
}

model users {
  user_id         String            @id(map: "users_pk") @db.VarChar
  created_at      String            @db.VarChar
  updated_at      String?           @db.VarChar
  companies_users companies_users[]
  memo_decks      memo_decks[]
  user_roles      user_roles[]
  users_projects  users_projects[]
}

model users_projects {
  user_id    String   @db.VarChar
  project_id String   @db.VarChar
  projects   projects @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction, map: "users_projects_projects_fk")
  users      users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "users_projects_users_fk")

  @@unique([user_id, project_id], map: "users_projects_user_id_idx")
}
