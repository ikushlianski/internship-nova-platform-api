// Tasks for particular class
// This is the final and immutable set of tasks for a class. This includes both live lesson tasks and homework. The curriculum is based on the course structure that existed at the time of class creation (instantiation). When a course changes in the future, it won't affect the class tasks, because they have already been "copied".

model ClassTask {
  class_task_id  String @id @default(autoincrement())
  course_task_id String
  class_id       String

  course_task CourseTask @relation(fields: [course_task_id], references: [course_task_id])
  class       Class      @relation(fields: [class_id], references: [class_id])

  @@map("class_homework")
}

model Student {
  student_id       String    @id
  user_id          String
  student_nickname String?
  /// When the student joined a particular class
  enrolled_date    DateTime?
  left_date        DateTime?
  created_date     DateTime?
  updated_date     DateTime?
  deleted          Boolean   @default(false)
  class_id         String

  user  User  @relation(fields: [user_id], references: [user_email])
  class Class @relation(fields: [class_id], references: [class_id])

  @@map("student")
}

model StudentAnswer {
  student_answer_id String @id @default(autoincrement())
  student_id        String
  class_task_id     String
  answer            String

  student    Student   @relation(fields: [student_id], references: [student_id])
  class_task ClassTask @relation(fields: [class_task_id], references: [class_task_id])

  @@map("student_answer")
}

enum StudentTaskStatus {
  PENDING
  BLOCKED
  IN_PROGRESS
  COMPLETED
}

model StudentTask {
  student_task_id String            @id @default(autoincrement())
  student_id      String
  class_task_id   String
  task_status     StudentTaskStatus

  student    Student   @relation(fields: [student_id], references: [student_id])
  class_task ClassTask @relation(fields: [class_task_id], references: [class_task_id])

  @@map("student_task")
}

// Base task, irrespective of any course or its instances (classes)
model Task {
  task_id           String    @id @default(autoincrement())
  subject_id        String
  /// Instruction for task
  task_description  String?
  /// The actual task text, e.g. reading passage, listening script, etc
  task_text         String?
  task_type_id      TaskType
  task_context_id   String
  task_form_id      String?
  task_created_date DateTime?
  task_updated_date DateTime?
  deleted           Boolean   @default(false)
  lesson_id         String
  gap_map           String?

  task_type    TaskType     @relation(fields: [task_type_id], references: [task_type_id])
  task_context TaskContext  @relation(fields: [task_context_id], references: [task_context_id])
  subject      Subject      @relation(fields: [subject_id], references: [subject_id])
  lesson       Lesson       @relation(fields: [lesson_id], references: [lesson_id])
  task_forms   TaskForm[]
  task_options TaskOption[]

  @@map("task")
}

/// e.g. Quiz, blank-filling, Discussion
model TaskForm {
  task_form_id          String  @id @default(autoincrement())
  task_form_name        String
  task_form_description String?

  task Task[]

  @@map("task_form")
}

/// Where the task is done: during live lesson, homework, self-study etc
model TaskContext {
  task_context_id          String  @id @default(autoincrement())
  task_context_name        String
  task_context_description String?

  task Task[]

  @@map("task_context")
}

model TaskOption {
  task_option_id    String  @id @default(autoincrement())
  task_id           String
  task_option_text  String
  task_option_order Int?
  is_correct        Boolean

  task Task @relation(fields: [task_id], references: [task_id])

  @@map("task_options")
}

/// e.g. Speaking, Reading, Vocabulary elicitation, Listening Comprehension, etc
model TaskType {
  task_type_id          String  @id @default(autoincrement())
  task_type_name        String
  task_type_description String?

  task Task[]

  @@map("task_type")
}
