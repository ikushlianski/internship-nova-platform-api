model User {
  user_email String     @id
  created_at DateTime   @default(now())
  updated_at DateTime?
  user_roles UserRole[]
  first_name String
  last_name  String
  nickname   String?
  /// This field is used to soft delete the user
  deleted    Boolean    @default(false)

  user_application_preferences UserApplicationPreferences[]
  mentor                       Mentor[]
  is_student_of                Student[]
  DataRemovalRequest           DataRemovalRequest[]
  Deck                         Deck[]
  UserCard                     UserCard[]
  VocabularyInbox              VocabularyInbox[]

  @@map("user")
}

model Role {
  role_id          String     @id
  role_name        String?
  role_description String?
  user_roles       UserRole[]

  @@map("role")
}

model UserRole {
  user_email String
  role_id    String

  user User @relation(fields: [user_email], references: [user_email])
  role Role @relation(fields: [role_id], references: [role_id])

  @@id([user_email, role_id])
  @@map("user_role")
}

model UserApplicationPreferences {
  user_email              String
  application_id          String
  accepted_privacy_policy Boolean
  accepted_cookies_policy Boolean

  user        User        @relation(fields: [user_email], references: [user_email])
  application Application @relation(fields: [application_id], references: [application_id])

  @@id([user_email, application_id])
  @@map("user_application_preferences")
}

model Application {
  /// admin_portal, marketing_website, etc
  application_id          String  @id
  application_name        String
  application_description String?
  application_url         String?

  user_application_preferences UserApplicationPreferences[]

  @@map("application")
}

enum DataRemovalStatusEnum {
  PENDING
  COMPLETED
  FAILED
}

model DataRemovalRequest {
  data_removal_request_id Int                   @id @default(autoincrement())
  user_email              String
  data_removal_request    String
  data_removal_status     DataRemovalStatusEnum @default(PENDING)
  data_removal_date       DateTime

  user User @relation(fields: [user_email], references: [user_email])

  @@map("data_removal_request")
}

model MeetingKind {
  meeting_kind_id   String @id
  meeting_kind_name String @unique

  class_calls ClassCall[]

  @@map("meeting_kind")
}

model CourseStructure {
  course_id  String
  module_id  Int
  section_id Int
  lesson_id  Int

  course  Course  @relation(fields: [course_id], references: [course_code])
  module  Module  @relation(fields: [module_id], references: [module_id])
  section Section @relation(fields: [section_id], references: [section_id])
  lesson  Lesson  @relation(fields: [lesson_id], references: [lesson_id])

  @@id([course_id, module_id, section_id, lesson_id])
  @@map("course_structure")
}

enum MeetingKindEnum {
  LESSON
  WORKSHOP
  EXAM
  INTRO_CALL
  OUTRO_CALL
  SPEAKING_CLUB_LESSON
  OTHER
}

enum ClassSizesEnum {
  INDIVIDUAL
  GROUP_2_4
  GROUP_5_8
  GROUP_9_12
}

/// Instance of a course
model Class {
  class_id          String    @id
  class_code        String?
  course_id         String
  start_date        DateTime
  end_date          DateTime?
  tuition_lang_code String
  time_of_day_id    String
  start_time_gmt3   String
  class_size_id     ClassSize @relation(fields: [classSizeClass_size_id], references: [class_size_id])
  created_date      DateTime?
  updated_date      DateTime?
  deleted           Boolean   @default(false)

  is_instance_of_course  Course           @relation(fields: [course_id], references: [course_code])
  time_of_day            TimeOfDay        @relation(fields: [time_of_day_id], references: [time_of_day_id])
  tuition_lang           TuitionLang      @relation(fields: [tuition_lang_code], references: [tuition_lang_code])
  mentor_classes         MentorsClasses[]
  students               Student[]
  booking_requests       BookingRequest[]
  class_calls            ClassCall[]
  classSizeClass_size_id String
  ClassTask              ClassTask[]

  @@map("class")
}

model ClassCall {
  class_call_id   String    @id
  class_id        String
  call_date       DateTime
  created_date    DateTime?
  updated_date    DateTime?
  deleted         Boolean   @default(false)
  meeting_kind_id String

  class        Class       @relation(fields: [class_id], references: [class_id])
  meeting_kind MeetingKind @relation(fields: [meeting_kind_id], references: [meeting_kind_id])

  @@map("class_call")
}

model ClassSize {
  class_size_id   String         @id
  class_size_name ClassSizesEnum @unique

  classes        Class[]
  MentorPayModel MentorPayModel[]

  @@map("class_size")
}

model Course {
  course_code     String    @id
  course_name     String?
  course_level_id String
  created_date    DateTime?
  subject_code    String

  course_level    CourseLevel       @relation(fields: [course_level_id], references: [course_level_id])
  course_advice   CourseAdvice[]
  classes         Class[]
  subject         Subject?          @relation(fields: [subject_code], references: [subject_code])
  CourseStructure CourseStructure[]
  CourseTask      CourseTask[]
  Module          Module[]
  LessonCard      LessonCard[]

  @@map("course")
}

model CourseAdvice {
  advice_id      String  @id
  course_code    String
  advice_text    String?
  last_used_date String?
  created_date   String

  course Course @relation(fields: [course_code], references: [course_code])

  @@map("course_advice")
}

// template homework tasks for course that will be copied to each class homework
model CourseTask {
  course_task_id String @id
  course_id      String
  module_id      Int
  section_id     Int
  lesson_id      Int
  task_id        Int
  question       String

  course    Course      @relation(fields: [course_id], references: [course_code])
  module    Module      @relation(fields: [module_id], references: [module_id])
  section   Section     @relation(fields: [section_id], references: [section_id])
  lesson    Lesson      @relation(fields: [lesson_id], references: [lesson_id])
  task      Task        @relation(fields: [task_id], references: [task_id])
  ClassTask ClassTask[]

  @@map("course_task")
}

model CourseLevel {
  course_level_id   String @id
  course_level_name String

  course                 Course[]
  CourseLevelsPerSubject CourseLevelsPerSubject[]

  @@map("course_level")
}

model Subject {
  subject_code String @id
  subject_name String

  Course                 Course[]
  CourseLevelsPerSubject CourseLevelsPerSubject[]

  @@map("subject")
}

model CourseLevelsPerSubject {
  course_level_id String
  subject_code    String

  course_level CourseLevel @relation(fields: [course_level_id], references: [course_level_id])
  subject      Subject     @relation(fields: [subject_code], references: [subject_code])

  @@id([course_level_id, subject_code])
  @@map("course_levels_per_subject")
}

model Lesson {
  lesson_id          Int       @id @default(autoincrement())
  lesson_name        String    @unique
  lesson_description String?
  lesson_order       Int
  created_date       DateTime?
  updated_date       DateTime?
  deleted            Boolean   @default(false)
  section_id         Int

  section         Section           @relation(fields: [section_id], references: [section_id])
  tasks           Task[]
  CourseStructure CourseStructure[]
  CourseTask      CourseTask[]
  Module          Module?           @relation(fields: [moduleModule_id], references: [module_id])
  moduleModule_id Int?
  LessonCard      LessonCard[]
  UserCard        UserCard[]

  @@map("lesson")
}

model Mentor {
  mentor_id             String    @id
  user_id               String
  mentor_description_en String?
  created_date          DateTime?
  updated_date          DateTime?
  deleted               Boolean   @default(false)
  user                  User      @relation(fields: [user_id], references: [user_email])

  mentor_classes MentorsClasses[]
  MentorPayModel MentorPayModel[]

  @@map("mentor")
}

model MentorsClasses {
  mentor_id    String
  class_id     String
  created_date DateTime?
  updated_date DateTime?
  deleted      Boolean   @default(false)

  mentor Mentor @relation(fields: [mentor_id], references: [mentor_id])
  class  Class  @relation(fields: [class_id], references: [class_id])

  @@id([mentor_id, class_id])
  @@map("mentors_classes")
}

model MentorPayModel {
  mentor_id         String
  class_size_id     String
  start_date        DateTime
  /// in USD
  pay_rate_per_hour Float
  created_date      DateTime?
  end_date          DateTime?
  deleted           Boolean   @default(false)

  mentor     Mentor    @relation(fields: [mentor_id], references: [mentor_id])
  class_size ClassSize @relation(fields: [class_size_id], references: [class_size_id])

  @@id([mentor_id, class_size_id, start_date])
  @@map("mentor_pay_model")
}

model Module {
  module_id          Int       @id @default(autoincrement())
  module_name        String    @unique
  module_description String?
  module_order       Int
  created_date       DateTime?
  updated_date       DateTime?
  deleted            Boolean   @default(false)
  course_id          String

  course          Course            @relation(fields: [course_id], references: [course_code])
  sections        Section[]
  lessons         Lesson[]
  CourseStructure CourseStructure[]
  CourseTask      CourseTask[]

  @@map("module")
}

model Section {
  section_id          Int       @id @default(autoincrement())
  section_name        String    @unique
  section_description String?
  section_order       Int
  created_date        DateTime?
  updated_date        DateTime?
  deleted             Boolean   @default(false)
  module_id           Int

  module          Module            @relation(fields: [module_id], references: [module_id])
  CourseStructure CourseStructure[]
  CourseTask      CourseTask[]
  Lesson          Lesson[]

  @@map("section")
}

model TimeOfDay {
  time_of_day_id   String @id @default(cuid())
  time_of_day_name String @unique

  classes Class[]

  @@map("time_of_day")
}

model TuitionLang {
  tuition_lang_code String @id @default(cuid())
  tuition_lang_name String @unique

  classes Class[]

  @@map("tuition_language")
}

model Deck {
  deck_id          String  @id
  user_id          String
  deck_description String?

  user User         @relation(fields: [user_id], references: [user_email])
  Card LessonCard[]

  @@map("deck")
}

model LessonCard {
  card_id     String  @id
  deck_id     String
  question    String
  answer      String
  example     String?
  course_code String
  lesson_id   Int

  deck   Deck   @relation(fields: [deck_id], references: [deck_id])
  course Course @relation(fields: [course_code], references: [course_code])
  lesson Lesson @relation(fields: [lesson_id], references: [lesson_id])

  @@map("card")
}

model UserCard {
  user_card_id String  @id
  user_id      String
  question     String
  answer       String
  example      String?
  lesson_id    Int?

  user   User    @relation(fields: [user_id], references: [user_email])
  lesson Lesson? @relation(fields: [lesson_id], references: [lesson_id])

  @@map("user_card")
}

model Vocabulary {
  vocabulary_id String @id
  user_id       String

  @@map("vocabulary")
}

model VocabularyInbox {
  user_id  String
  question String
  answer   String

  user User @relation(fields: [user_id], references: [user_email])

  @@id([user_id, question])
  @@map("vocabulary_inbox")
}

model BookingRequest {
  booking_request_id            String               @id
  class_id                      String
  booking_date                  DateTime
  booking_request_status        BookingRequestStatus @default(PENDING)
  user_stated_name              String?
  user_stated_phone             String?
  user_stated_email             String?
  user_stated_telegram_nickname String?

  class Class @relation(fields: [class_id], references: [class_id])

  @@map("booking_request")
}

enum BookingRequestStatus {
  PENDING
  NEGOITIATING
  /// Student assigned to a class
  ASSIGNED
  REJECTED
  LOST
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
  output          = "../prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model from auth.prisma
model Users {
  user_email String    @id @map("user_email")
  created_at DateTime  @default(now())
  updated_at DateTime?
  first_name String
  last_name  String
  nickname   String?
  deleted    Boolean   @default(false)

  DeckTest     DeckTest[]
  UserCardTest UserCardTest[]

  @@map("users")
}

// Models from learning.prisma
model DeckTest {
  deck_id          String  @id @map("deck_id")
  user_id          String
  deck_description String?

  user         Users          @relation(fields: [user_id], references: [user_email])
  UserCardTest UserCardTest[]

  @@map("deck_tests")
}

model UserCardTest {
  user_card_id String  @id @map("user_card_id")
  user_id      String
  deck_id      String
  question     String
  answer       String
  example      String?

  user Users    @relation(fields: [user_id], references: [user_email])
  deck DeckTest @relation(fields: [deck_id], references: [deck_id])

  @@map("user_card_tests")
}

// Tasks for particular class
// This is the final and immutable set of tasks for a class. This includes both live lesson tasks and homework. The curriculum is based on the course structure that existed at the time of class creation (instantiation). When a course changes in the future, it won't affect the class tasks, because they have already been "copied".

model ClassTask {
  class_task_id  Int    @id @default(autoincrement())
  course_task_id String
  class_id       String

  course_task    CourseTask      @relation(fields: [course_task_id], references: [course_task_id])
  class          Class           @relation(fields: [class_id], references: [class_id])
  student_tasks  StudentTask[]
  student_answer StudentAnswer[]

  @@map("class_homework")
}

model Student {
  student_id       String    @id
  user_id          String
  student_nickname String?
  /// When the student joined a particular class
  enrolled_date    DateTime?
  left_date        DateTime?
  created_date     DateTime?
  updated_date     DateTime?
  deleted          Boolean   @default(false)
  class_id         String

  user            User            @relation(fields: [user_id], references: [user_email])
  class           Class           @relation(fields: [class_id], references: [class_id])
  student_task    StudentTask[]
  student_answers StudentAnswer[]

  @@map("student")
}

model StudentAnswer {
  student_answer_id Int    @id @default(autoincrement())
  student_id        String
  class_task_id     Int
  answer            String

  student    Student   @relation(fields: [student_id], references: [student_id])
  class_task ClassTask @relation(fields: [class_task_id], references: [class_task_id])

  @@map("student_answer")
}

enum StudentTaskStatus {
  PENDING
  BLOCKED
  IN_PROGRESS
  COMPLETED
}

model StudentTask {
  student_task_id Int               @id @default(autoincrement())
  student_id      String
  class_task_id   Int
  task_status     StudentTaskStatus

  student    Student   @relation(fields: [student_id], references: [student_id])
  class_task ClassTask @relation(fields: [class_task_id], references: [class_task_id])

  @@map("student_task")
}

// Base task, irrespective of any course or its instances (classes)
model Task {
  task_id           Int       @id @default(autoincrement())
  /// Instruction for task
  task_description  String?
  /// The actual task text, e.g. reading passage, listening script, etc
  task_text         String?
  task_type_id      Int
  task_context_id   String
  task_form_id      Int?
  task_created_date DateTime?
  task_updated_date DateTime?
  deleted           Boolean   @default(false)
  lesson_id         Int
  gap_map           String?

  task_type    TaskType     @relation(fields: [task_type_id], references: [task_type_id])
  task_context TaskContext  @relation(fields: [task_context_id], references: [task_context_id])
  lesson       Lesson       @relation(fields: [lesson_id], references: [lesson_id])
  task_forms   TaskForm[]
  task_options TaskOption[]
  CourseTask   CourseTask[]

  @@map("task")
}

/// e.g. Quiz, blank-filling, Discussion
model TaskForm {
  task_form_id          Int     @id @default(autoincrement())
  task_form_name        String
  task_form_description String?

  task Task[]

  @@map("task_form")
}

/// Where the task is done: during live lesson, homework, self-study etc
model TaskContext {
  task_context_id          String  @id
  task_context_name        String
  task_context_description String?

  task Task[]

  @@map("task_context")
}

model TaskOption {
  task_option_id    Int     @id @default(autoincrement())
  task_id           Int
  task_option_text  String
  task_option_order Int?
  is_correct        Boolean

  task Task @relation(fields: [task_id], references: [task_id])

  @@map("task_options")
}

/// e.g. Speaking, Reading, Vocabulary elicitation, Listening Comprehension, etc
model TaskType {
  task_type_id          Int     @id @default(autoincrement())
  task_type_name        String
  task_type_description String?

  task Task[]

  @@map("task_type")
}
