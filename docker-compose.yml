services:
  gateway:
    container_name: gateway
    build:
      target: ${NODE_ENV}
      context: .
      dockerfile: apps/gateway/Dockerfile
      args:
        - GATEWAY_PORT=${GATEWAY_PORT}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - ENV_FILE=${ENV_FILE}
    env_file:
      - ${ENV_FILE}
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 3000 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - .:/usr/src/server
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    entrypoint: sh -c "npx prisma migrate dev && sleep 10 && npx nest start gateway --watch"
    networks:
      - local
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  users:
    container_name: users
    env_file:
      - ${ENV_FILE}
    build:
      target: ${NODE_ENV}
      context: .
      dockerfile: apps/users/Dockerfile
      args:
        - USERS_SERVICE_PORT=${USERS_SERVICE_PORT}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - ENV_FILE=${ENV_FILE}
    ports:
      - "${USERS_SERVICE_PORT}:${USERS_SERVICE_PORT}"
    volumes:
      - .:/usr/src/server
    command: npx nest start users --watch
    networks:
      - local
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      gateway:
        condition: service_healthy

  learning:
    container_name: learning
    env_file:
      - ${ENV_FILE}
    build:
      target: ${NODE_ENV}
      context: .
      dockerfile: apps/learning/Dockerfile
      args:
        - LEARNING_SERVICE_PORT=${LEARNING_SERVICE_PORT}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - ENV_FILE=${ENV_FILE}
    ports:
      - "${LEARNING_SERVICE_PORT}:${LEARNING_SERVICE_PORT}"
    volumes:
      - .:/usr/src/server
    command: npx nest start learning --watch
    networks:
      - local
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      gateway:
        condition: service_healthy
        
  curriculum:
    container_name: curriculum
    env_file:
      - ${ENV_FILE}
    build:
      target: ${NODE_ENV}
      context: .
      dockerfile: apps/curriculum/Dockerfile
      args:
        - CURRICULUM_SERVICE_PORT=${CURRICULUM_SERVICE_PORT}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - ENV_FILE=${ENV_FILE}
    ports:
      - "${CURRICULUM_SERVICE_PORT}:${CURRICULUM_SERVICE_PORT}"
    volumes:
      - .:/usr/src/server
    command: npx nest start curriculum --watch
    networks:
      - local
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      gateway:
        condition: service_healthy

  database:
    container_name: database
    restart: always
    image: postgres:16.3-alpine
    env_file:
      - ${ENV_FILE}
    healthcheck:
      test: "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
      interval: 15s
      timeout: 5s
      retries: 5
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"
    networks:
      - local
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:4.0.1-management
    env_file:
      - ${ENV_FILE}
    healthcheck:
      test: "rabbitmq-diagnostics -q ping"
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
      - "${RABBITMQ_MC_PORT}:${RABBITMQ_MC_PORT}"
    volumes:
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - local
    depends_on:
      database:
        condition: service_healthy

volumes:
  database:
    driver: local

networks:
  local:
    driver: bridge